/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LegalDocument } from "./LegalDocument";
import { LegalDocumentCountArgs } from "./LegalDocumentCountArgs";
import { LegalDocumentFindManyArgs } from "./LegalDocumentFindManyArgs";
import { LegalDocumentFindUniqueArgs } from "./LegalDocumentFindUniqueArgs";
import { CreateLegalDocumentArgs } from "./CreateLegalDocumentArgs";
import { UpdateLegalDocumentArgs } from "./UpdateLegalDocumentArgs";
import { DeleteLegalDocumentArgs } from "./DeleteLegalDocumentArgs";
import { Business } from "../../business/base/Business";
import { LegalDocumentService } from "../legalDocument.service";
@graphql.Resolver(() => LegalDocument)
export class LegalDocumentResolverBase {
  constructor(protected readonly service: LegalDocumentService) {}

  async _legalDocumentsMeta(
    @graphql.Args() args: LegalDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LegalDocument])
  async legalDocuments(
    @graphql.Args() args: LegalDocumentFindManyArgs
  ): Promise<LegalDocument[]> {
    return this.service.legalDocuments(args);
  }

  @graphql.Query(() => LegalDocument, { nullable: true })
  async legalDocument(
    @graphql.Args() args: LegalDocumentFindUniqueArgs
  ): Promise<LegalDocument | null> {
    const result = await this.service.legalDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LegalDocument)
  async createLegalDocument(
    @graphql.Args() args: CreateLegalDocumentArgs
  ): Promise<LegalDocument> {
    return await this.service.createLegalDocument({
      ...args,
      data: {
        ...args.data,

        business: args.data.business
          ? {
              connect: args.data.business,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LegalDocument)
  async updateLegalDocument(
    @graphql.Args() args: UpdateLegalDocumentArgs
  ): Promise<LegalDocument | null> {
    try {
      return await this.service.updateLegalDocument({
        ...args,
        data: {
          ...args.data,

          business: args.data.business
            ? {
                connect: args.data.business,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LegalDocument)
  async deleteLegalDocument(
    @graphql.Args() args: DeleteLegalDocumentArgs
  ): Promise<LegalDocument | null> {
    try {
      return await this.service.deleteLegalDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Business, {
    nullable: true,
    name: "business",
  })
  async getBusiness(
    @graphql.Parent() parent: LegalDocument
  ): Promise<Business | null> {
    const result = await this.service.getBusiness(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
