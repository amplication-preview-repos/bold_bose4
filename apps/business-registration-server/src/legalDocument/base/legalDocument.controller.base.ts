/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LegalDocumentService } from "../legalDocument.service";
import { LegalDocumentCreateInput } from "./LegalDocumentCreateInput";
import { LegalDocument } from "./LegalDocument";
import { LegalDocumentFindManyArgs } from "./LegalDocumentFindManyArgs";
import { LegalDocumentWhereUniqueInput } from "./LegalDocumentWhereUniqueInput";
import { LegalDocumentUpdateInput } from "./LegalDocumentUpdateInput";

export class LegalDocumentControllerBase {
  constructor(protected readonly service: LegalDocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LegalDocument })
  async createLegalDocument(
    @common.Body() data: LegalDocumentCreateInput
  ): Promise<LegalDocument> {
    return await this.service.createLegalDocument({
      data: {
        ...data,

        business: data.business
          ? {
              connect: data.business,
            }
          : undefined,
      },
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        filename: true,
        fileUrl: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LegalDocument] })
  @ApiNestedQuery(LegalDocumentFindManyArgs)
  async legalDocuments(
    @common.Req() request: Request
  ): Promise<LegalDocument[]> {
    const args = plainToClass(LegalDocumentFindManyArgs, request.query);
    return this.service.legalDocuments({
      ...args,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        filename: true,
        fileUrl: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LegalDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async legalDocument(
    @common.Param() params: LegalDocumentWhereUniqueInput
  ): Promise<LegalDocument | null> {
    const result = await this.service.legalDocument({
      where: params,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        filename: true,
        fileUrl: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LegalDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLegalDocument(
    @common.Param() params: LegalDocumentWhereUniqueInput,
    @common.Body() data: LegalDocumentUpdateInput
  ): Promise<LegalDocument | null> {
    try {
      return await this.service.updateLegalDocument({
        where: params,
        data: {
          ...data,

          business: data.business
            ? {
                connect: data.business,
              }
            : undefined,
        },
        select: {
          business: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          filename: true,
          fileUrl: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LegalDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLegalDocument(
    @common.Param() params: LegalDocumentWhereUniqueInput
  ): Promise<LegalDocument | null> {
    try {
      return await this.service.deleteLegalDocument({
        where: params,
        select: {
          business: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          filename: true,
          fileUrl: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
