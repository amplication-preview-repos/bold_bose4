/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LegalDocument as PrismaLegalDocument,
  Business as PrismaBusiness,
} from "@prisma/client";

export class LegalDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LegalDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.legalDocument.count(args);
  }

  async legalDocuments(
    args: Prisma.LegalDocumentFindManyArgs
  ): Promise<PrismaLegalDocument[]> {
    return this.prisma.legalDocument.findMany(args);
  }
  async legalDocument(
    args: Prisma.LegalDocumentFindUniqueArgs
  ): Promise<PrismaLegalDocument | null> {
    return this.prisma.legalDocument.findUnique(args);
  }
  async createLegalDocument(
    args: Prisma.LegalDocumentCreateArgs
  ): Promise<PrismaLegalDocument> {
    return this.prisma.legalDocument.create(args);
  }
  async updateLegalDocument(
    args: Prisma.LegalDocumentUpdateArgs
  ): Promise<PrismaLegalDocument> {
    return this.prisma.legalDocument.update(args);
  }
  async deleteLegalDocument(
    args: Prisma.LegalDocumentDeleteArgs
  ): Promise<PrismaLegalDocument> {
    return this.prisma.legalDocument.delete(args);
  }

  async getBusiness(parentId: string): Promise<PrismaBusiness | null> {
    return this.prisma.legalDocument
      .findUnique({
        where: { id: parentId },
      })
      .business();
  }
}
